// <auto-generated />
using System;
using DuQ.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DuQ.Migrations
{
    [DbContext(typeof(DuqContext))]
    partial class DuqContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("duqueue")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DuQ.Models.DuQueue.DuQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("checkin_time");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("checkout_time");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<Guid>("QueueLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("queue_location_id");

                    b.Property<Guid>("QueueStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("queue_status_id");

                    b.Property<Guid>("QueueTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("queue_type_id");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.HasKey("Id")
                        .HasName("pk_du_queues");

                    b.HasIndex("QueueLocationId")
                        .HasDatabaseName("ix_du_queues_queue_location_id");

                    b.HasIndex("QueueStatusId")
                        .HasDatabaseName("ix_du_queues_queue_status_id");

                    b.HasIndex("QueueTypeId")
                        .HasDatabaseName("ix_du_queues_queue_type_id");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_du_queues_student_id");

                    b.ToTable("du_queues", "duqueue");
                });

            modelBuilder.Entity("DuQ.Models.DuQueue.DuQueueLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("location");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.HasKey("Id")
                        .HasName("pk_du_queue_locations");

                    b.ToTable("du_queue_locations", "duqueue");
                });

            modelBuilder.Entity("DuQ.Models.DuQueue.DuQueueStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_du_queue_statuses");

                    b.ToTable("du_queue_statuses", "duqueue");
                });

            modelBuilder.Entity("DuQ.Models.DuQueue.DuQueueType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_du_queue_types");

                    b.ToTable("du_queue_types", "duqueue");
                });

            modelBuilder.Entity("DuQ.Models.DuQueue.DuQueueWaitTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<int>("QueueNoStudents")
                        .HasColumnType("integer")
                        .HasColumnName("queue_no_students");

                    b.Property<int>("WaitTime")
                        .HasColumnType("integer")
                        .HasColumnName("wait_time");

                    b.HasKey("Id")
                        .HasName("pk_du_queue_wait_times");

                    b.ToTable("du_queue_wait_times", "duqueue");
                });

            modelBuilder.Entity("DuQ.Models.DuQueue.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_details");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("ModifiedUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_utc");

                    b.Property<string>("StudentNo")
                        .HasColumnType("text")
                        .HasColumnName("student_no");

                    b.HasKey("Id")
                        .HasName("pk_students");

                    b.ToTable("students", "duqueue");
                });

            modelBuilder.Entity("DuQ.Models.DuQueue.DuQueue", b =>
                {
                    b.HasOne("DuQ.Models.DuQueue.DuQueueLocation", "QueueLocation")
                        .WithMany("DuQueues")
                        .HasForeignKey("QueueLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_du_queues_du_queue_locations_queue_location_id");

                    b.HasOne("DuQ.Models.DuQueue.DuQueueStatus", "QueueStatus")
                        .WithMany("DuQueues")
                        .HasForeignKey("QueueStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_du_queues_du_queue_statuses_queue_status_id");

                    b.HasOne("DuQ.Models.DuQueue.DuQueueType", "QueueType")
                        .WithMany("DuQueues")
                        .HasForeignKey("QueueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_du_queues_du_queue_types_queue_type_id");

                    b.HasOne("DuQ.Models.DuQueue.Student", "Student")
                        .WithMany("DuQueues")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_du_queues_students_student_id");

                    b.Navigation("QueueLocation");

                    b.Navigation("QueueStatus");

                    b.Navigation("QueueType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DuQ.Models.DuQueue.DuQueueLocation", b =>
                {
                    b.Navigation("DuQueues");
                });

            modelBuilder.Entity("DuQ.Models.DuQueue.DuQueueStatus", b =>
                {
                    b.Navigation("DuQueues");
                });

            modelBuilder.Entity("DuQ.Models.DuQueue.DuQueueType", b =>
                {
                    b.Navigation("DuQueues");
                });

            modelBuilder.Entity("DuQ.Models.DuQueue.Student", b =>
                {
                    b.Navigation("DuQueues");
                });
#pragma warning restore 612, 618
        }
    }
}
