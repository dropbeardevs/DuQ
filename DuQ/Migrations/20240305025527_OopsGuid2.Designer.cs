// <auto-generated />
using System;
using DuQ.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DuQ.Migrations
{
    [DbContext(typeof(DuqContext))]
    [Migration("20240305025527_OopsGuid2")]
    partial class OopsGuid2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("DuQ.Data.DuQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QueueStatusId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("QueueTypeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("QueueStatusId");

                    b.HasIndex("QueueTypeId");

                    b.HasIndex("StudentId");

                    b.ToTable("DuQueues");
                });

            modelBuilder.Entity("DuQ.Data.DuQueuePosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CurrentId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("NextId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PreviousId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrentId");

                    b.HasIndex("NextId");

                    b.HasIndex("PreviousId");

                    b.ToTable("DuQueuePosition");
                });

            modelBuilder.Entity("DuQ.Data.DuQueueStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DuQueueStatuses");
                });

            modelBuilder.Entity("DuQ.Data.DuQueueType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DuQueueTypes");
                });

            modelBuilder.Entity("DuQ.Data.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DuQ.Data.DuQueue", b =>
                {
                    b.HasOne("DuQ.Data.DuQueueStatus", "QueueStatus")
                        .WithMany("DuQueues")
                        .HasForeignKey("QueueStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DuQ.Data.DuQueueType", "QueueType")
                        .WithMany()
                        .HasForeignKey("QueueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DuQ.Data.Student", "Student")
                        .WithMany("DuQueues")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueueStatus");

                    b.Navigation("QueueType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DuQ.Data.DuQueuePosition", b =>
                {
                    b.HasOne("DuQ.Data.DuQueue", "Current")
                        .WithMany()
                        .HasForeignKey("CurrentId");

                    b.HasOne("DuQ.Data.DuQueue", "Next")
                        .WithMany()
                        .HasForeignKey("NextId");

                    b.HasOne("DuQ.Data.DuQueue", "Previous")
                        .WithMany()
                        .HasForeignKey("PreviousId");

                    b.Navigation("Current");

                    b.Navigation("Next");

                    b.Navigation("Previous");
                });

            modelBuilder.Entity("DuQ.Data.DuQueueStatus", b =>
                {
                    b.Navigation("DuQueues");
                });

            modelBuilder.Entity("DuQ.Data.Student", b =>
                {
                    b.Navigation("DuQueues");
                });
#pragma warning restore 612, 618
        }
    }
}
