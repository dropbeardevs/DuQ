@page "/users"
@rendermode @(new InteractiveWebAssemblyRenderMode(false))
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using System.Security.Claims
@using System.Text.Json;
@using System.Timers;
@* @attribute [Authorize(Roles = "Admin")] *@
@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<PageTitle>Users</PageTitle>

<h1>User List</h1>

<button class="btn btn-primary mb-1" @onclick="NewUserModal">New</button>
<div class="search-box my-1 float-end">
    <input type="search" autofocus @bind="NameSearch" @bind:event="oninput" placeholder="Search user" />
</div>
<QuickGrid Class="table table-striped table-bordered" ItemsProvider="@usersProvider" Pagination="@pagination" @ref="usersGrid">
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="@(u => u.Id)" Sortable="true" />
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="@(u => u.Email)" Sortable="true" InitialSortDirection="Microsoft.AspNetCore.Components.QuickGrid.SortDirection.Auto" />
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="@(u => u.UserName)" Sortable="true" />
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="@(u => u.DisplayName)" Sortable="false" />
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="@(u => string.Join(", ", u.Roles))" Title="Roles" Sortable="false" />
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn Property="@(u => u.LockedOut)" Sortable="false" />
    <Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn Title="Actions">
        <button class="btn btn-outline-secondary" title="Edit" @onclick="@(() => ChangeUser(context))">
            <span class="bi bi-pencil-fill" aria-hidden="true"></span>
        </button>
        <button class="btn btn-outline-secondary" title="Delete" @onclick="@(async () => await DeleteUserAsync(context))">
            <span class="bi bi-trash-fill" aria-hidden="true"></span>
        </button>
        <button class="btn btn-outline-secondary" title="Password" @onclick="@(() => ChangePassword(context))">
            <span class="bi bi-key-fill" aria-hidden="true"></span>
        </button>
    </Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>
</QuickGrid>
<Paginator State="@pagination" />

<Modal @ref="newModal" Title="Add User">
    <Body>
        <div class="row">
            <form id="newForm" @onsubmit="@(async () => await AddNewUserAsync())">
                <div class="mb-3">
                    <label class="form-label">Username:</label>
                    <input type="text" class="form-control" placeholder="User Name" required @bind="@userNameField">
                </div>
                <div class="mb-3">
                    <label class="form-label">Name:</label>
                    <input type="text" class="form-control" placeholder="Full Name" @bind="@fullNameField">
                </div>
                <div class="mb-3">
                    <label class="form-label">Email:</label>
                    <input type="email" class="form-control" placeholder="Email" required @bind="@emailField">
                </div>
                <div class="mb-3">
                    <label class="form-label">Password:</label>
                    <input type="password" class="form-control" placeholder="Password" required @bind="@passwordField">
                </div>
            </form>
        </div>
    </Body>
    <Footer>
        <p class="text-danger me-auto">@newError</p>
        <button type="submit" class="btn btn-primary" form="newForm">Create</button>
        <button type="button" class="btn btn-secondary" @onclick="() => newModal.Close()">Cancel</button>
    </Footer>
</Modal>

<Modal @ref="editModal" Title="Edit User">
    <Body>
        <div class="row">
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <a class="nav-link @TabClass(0)" @onclick="() => curTabIdx = 0">User</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @TabClass(1)" @onclick="() => curTabIdx = 1">Roles</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @TabClass(2)" @onclick="() => curTabIdx = 2">Claims</a>
                </li>
            </ul>

            <div class="tab-content">
                <div class="tab-pane @TabClass(0)">
                    <form id="editForm" @onsubmit="@(async () => await UpdateUserAsync())">
                        <div class="mb-3">
                            <label class="form-label">Email:</label>
                            <input type="email" class="form-control" placeholder="Email" required @bind="@emailField">
                        </div>
                        <div class="mb-3">
                            <input class="form-check-input" type="checkbox" @bind="@lockedField">
                            <label class="form-check-label">Locked:</label>
                        </div>
                    </form>
                </div>
                <div class="tab-pane @TabClass(1)">
                    <div class="mb-3">
                        @foreach (var role in allRoles)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="@role.Key" checked="@roles.Contains(role.Value)" @onchange="eventArgs => CheckboxChanged(role.Value, eventArgs.Value)">
                                <label class="form-check-label">@role.Value</label>
                            </div>
                        }
                    </div>
                </div>
                <div class="tab-pane @TabClass(2)">
                    <table class="table table-sm table-borderless">
                        <tbody>
                            <tr>
                                <th>Type</th>
                                <th>Value</th>
                                <th>Action</th>
                            </tr>
                            @foreach (var claim in claims)
                            {
                                <tr>
                                    <td>@claim.Type</td>
                                    <td>@claim.Value</td>
                                    <td><a class="actionlink" @onclick="() => claims.Remove(claim)">Remove</a></td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td>
                                    <select @bind="@claimTypeField" class="form-select">
                                        <option></option>
                                        @foreach (var type in claimTypes)
                                        {
                                            <option>@type.Key</option>
                                        }
                                    </select>
                                </td>
                                <td><input type="text" class="form-control" @bind="@claimValueField"></td>
                                <td><a class="actionlink" @onclick="@(() => AddClaim())">Add</a></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    </Body>
    <Footer>
        <p class="text-danger me-auto">@editError</p>
        <button type="submit" class="btn btn-primary" form="editForm">Update</button>
        <button type="button" class="btn btn-secondary" @onclick="() => editModal.Close()">Close</button>
    </Footer>
</Modal>

<Modal @ref="pwdModal" Title="Reset Password">
    <Body>
        <div class="row">
            <form id="pwdForm" @onsubmit="@(async () => await ResetPasswordAsync())">
                <div class="mb-3">
                    <label class="form-label">Password:</label>
                    <input type="password" class="form-control" placeholder="Password" required @bind="@passwordField">
                </div>
                <div class="mb-3">
                    <label class="form-label">Verify:</label>
                    <input type="password" class="form-control" placeholder="Verify" required @bind="@verifyField">
                </div>
            </form>
        </div>
    </Body>
    <Footer>
        <p class="text-danger me-auto">@pwdError</p>
        <button type="submit" class="btn btn-primary" form="pwdForm">Reset</button>
        <button type="button" class="btn btn-secondary" @onclick="() => pwdModal.Close()">Cancel</button>
    </Footer>
</Modal>
